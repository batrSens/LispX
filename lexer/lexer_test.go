package lexer

import (
	"testing"

	"github.com/magiconair/properties/assert"
)

func TestLexer(t *testing.T) {
	lx := NewLexer("  )) T 32.4 -4.2 2e2 9e-2 -9e-1 3.1e9 12/3 - + += \";;;\"; fsadf\n -23.34e-1423u Tnil nil |123| . (2.3e-9)")
	tok, _ := lx.NextToken()
	assert.Equal(t, tok.Tag, TagRPar)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagRPar)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagSymbol)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNumber)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNumber)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNumber)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNumber)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNumber)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNumber)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNumber)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagSymbol)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagSymbol)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagSymbol)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagString)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagSymbol)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagSymbol)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNil)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagSymbol)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagSymbol)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagLPar)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagNumber)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagRPar)
	tok, _ = lx.NextToken()
	assert.Equal(t, tok.Tag, TagEOF)
}
